<?xml version="1.0" encoding="UTF-8"?>
<xs:schema
        xmlns="http://www.tmaxsoft.com/xml/ns/jeus"
        targetNamespace="http://www.tmaxsoft.com/xml/ns/jeus"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
        jaxb:version="2.0"
        elementFormDefault="qualified"
        attributeFormDefault="unqualified"
        version="7.0">

    <xs:include schemaLocation="jeus-webservices-client-dd.xsd"/>

    <xs:simpleType name="jeus-versionType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="5.0"/>
            <xs:enumeration value="6.0"/>
            <xs:enumeration value="7.0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:group name="thread-pool-group">
        <xs:sequence>
            <xs:element name="min" type="nonNegativeIntType" minOccurs="0" default="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Thread Pool에서 관리하는 스레드 수의 최솟값이다.
                    [Dynamic]: 동적 변경이 가능하다.
                    [Basic]
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max" type="nonNegativeIntType" minOccurs="0" default="10">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Thread Pool에서 관리하는 스레드 수의 최댓값이다.
                    [Default Value]: 기본값은 10개이다. (System Pool의 기본값은 100이다).
                    [Dynamic]: 동적 변경이 가능하다.
                    [Basic]
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keep-alive-time" type="nonNegativeLongType" minOccurs="0" default="60000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Min 이하의 스레드에 대해서 설정된 시간 동안 사용되지 않는다면 자동적으로 Thread Pool에서 제거된다. 0이면 제거하지 않는다.
                    [Default Value]: 기본값은 1분이다. (System Pool의 기본값은 300000이다).
                    [Value Description]: 밀리세컨드 단위로 설정한다.
                    [Dynamic]: 동적 변경이 가능하다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="queue-size" type="nonNegativeIntType" minOccurs="0" default="4096">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Thread Pool이 처리하는 업무 개체를 저장하는 Queue의 크기를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="stuck-thread-handling" type="stuck-thread-handlingType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 스레드가 특정 업무 때문에 일정 시간 이상 계속 점유된 상태일 경우, 해당 스레드에 대해서 특정 액션을 취하기 위한 설정이다.
                    [Dynamic]: 동적 변경이 가능하다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="stuck-thread-handlingType">
        <xs:sequence>
            <xs:element name="max-stuck-thread-time" type="nonNegativeLongType" minOccurs="0" default="3600000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 스레드를 Stuck Thread로 판단하는 기준이 되는 값을 설정한다. 설정된 시간 이상 계속 점유된 상태이면 해당 스레드를 Stuck Thread로 간주한다.
                    [Default Value]: 기본값은 1시간이다.
                    [Value Description]: 밀리세컨드 단위로 설정한다.
                    [Dynamic]: 동적 변경이 가능하다
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="action-on-stuck-thread" type="action-on-stuck-threadType" minOccurs="0" default="None">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Stuck Thread로 판단된 경우 그 스레드에 대해 특정 액션을 취하기 위한 설정이다.
                    [Default Value]: 기본값은 아무 액션도 취하지 않는 None이다. (System Pool의 기본값은 IgnoreAndReplace이다.)
                    [Dynamic]: 동적 변경이 가능하다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="stuck-thread-check-period" type="nonNegativeLongType" minOccurs="0" default="300000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Stuck Thread 의 상태를 체크하는 주기를 설정한다.
                    [Default Value]: 기본값은 5분이다.
                    [Value Description]: 밀리세컨드 단위로 설정한다.
                    [Dynamic]: 동적 변경이 가능하다
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="action-on-stuck-threadType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="None">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 아무 액션도 취하지 않는다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="Interrupt">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: java.lang.Thread#interrupt() 호출 등을 통해서 Interrupt Signal을 보낸다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="IgnoreAndReplace">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Stuck Thread를 무시하고 새로운 스레드로 교체한다. 이후 Stuck 상태에서 풀리면 무시한 스레드는 버려진다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="thread-poolingType">
        <xs:choice>
            <xs:element name="shared" type="shared-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 서버 전반적으로 공유할 Thread Pool을 사용한다.
                    [Dynamic]: 동적 변경이 가능하다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="dedicated" type="dedicated-poolType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 서비스별 전용 Thread Pool을 사용한다.
                    [Dynamic]: 동적 변경이 가능하다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="shared-poolType">
        <xs:sequence>
            <xs:element name="reserved-thread-num" type="nonNegativeIntType" minOccurs="0" default="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서버 전반적으로 공유할 Thread Pool을 사용하는 경우 다른 서비스가 스레드를 모두 점유하면 스레드 할당을 받지 못할 수 있다.
                        따라서 특별히 이 서비스를 위한 스레드를 미리 할당하고 싶을 경우에 설정한다.
                        설정값은 다른 서비스 들과 합산했을 때 System Thread Pool의 최댓값을 넘지 않도록 해야 한다.
                        [Dynamic]: 동적 변경이 가능하다.
                     ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="dedicated-poolType">
        <xs:group ref="thread-pool-group">
            <xs:annotation>
                <xs:documentation><![CDATA[
                    [Description]: 서비스별 전용 Thread Pool을 설정한다.
                ]]></xs:documentation>
            </xs:annotation>
        </xs:group>
    </xs:complexType>

    <xs:group name="loggingGroup">
        <xs:sequence>
            <xs:element name="level" type="loggingLevelType" minOccurs="0" default="INFO">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Logger의 레벨을 설정한다. 각 레벨의 의미는 Java SE Logging API의 "Level Class Documentation"을 참고한다.
                        [Dynamic]: 동적 변경이 가능하다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="use-parent-handlers" type="xs:boolean" minOccurs="0" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Dynamic]: 동적 변경이 가능하지만 JEUS 내부적으로 설정과 관계없이 설정해주는 부분(jeus logger, access logger)은
                        수정되지 않는다.
                        [Description]: 상위 Logger의 핸들러를 이 Logger에서도 사용할지를 결정한다.
                        기본값은 true로 상위 Logger의 핸들러를 사용해서 로그 메시지를 출력한다. 단, "jeus" Logger의 경우는 Root Logger이기 때문에 fasle로 설정한다.
                        웹 액세스 로그의 경우, 웹 엔진 액세스 로거에서는 이 설정은 의미가 없다. 가상 호스트 별 액세스 로거에서는 이 설정을 false로 하면
                        웹 엔진 전체의 액세스 로그에 가상 호스트 별 액세스 로그를 남기지 않는다.
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="filter-class" type="valuableToken" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Logger에 지정할 필터 클래스의 Fully Qualified Class Name을 설정한다.
                        필터 클래스에 구현한 내용을 바탕으로 로그 메시지들이 필터링되어 출력된다.
                        [Example]: com.tmax.logging.filter.MyFilter
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="formatter-class" type="valuableToken" minOccurs="0" default="jeus.util.logging.SimpleFormatter">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 Logger의 핸들러에 지정할 Formatter 클래스의 Fully Qualified Class Name을 설정한다. 이 클래스는
                        java.util.logging.Formatter를 상속받고 jeus.util.logging.JeusFormatter를 구현해야 한다.
                        formatter class에서 구현한 내용을 바탕으로 로그 메시지가 Formatting되어 출력된다.
                        [Example]: com.tmax.logging.handler.MyHandler
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="handler" type="handlerType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Logger에서 사용할 핸들러를 설정한다.
                        [Dynamic]: handler 추가 가능
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="handlerType">
        <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="file-handler" type="file-handlerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Logger를 파일로 출력하고자 할 경우에 사용하는 핸들러이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="smtp-handler" type="smtp-handlerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Logger를 e-mail로 보내고자 할 경우에 사용하는 핸들러이다.
                        [Performance Recommendation]: 하나의 Logging 메시지가 하나의 e-mail로 전송되므로
                        적절한 필터 없이 사용하는 것은 엄청난 양의 e-mail을 발생시켜 아주 위험하므로 주의가 필요하다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="socket-handler" type="socket-handlerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Logger를 지정된 소켓으로 보내고자 할 경우에 사용하는 핸들러이다.
                        [Performance Recommendation]: 하나의 Logging 메시지가 하나의 소켓으로 전송되므로
                        적절한 필터 없이 사용하는 것은 성능 저하를 가져온다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="user-handler" type="user-handlerType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: User가 Java SE Logging API에 따라 생성한 핸들러를 사용할 경우의 설정이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="common-handlerType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: 핸들러의 이름을 설정한다. 핸들러 이름은 하나의 Logger 내에서 유일해야 하며,
                        설정된 이름은 관리 도구(WebAdmin 등의 툴) 등에서 핸들러를 지칭할 때 사용한다.
                        [Example]: handler1
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="level" type="loggingLevelType" minOccurs="0" default="FINEST">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Dynamic]: 동적 변경이 가능하다.
                        [Description]: 핸들러의 레벨을 설정한다. Logger를 통과한 메시지의 레벨이 해당 핸들러
                        레벨에 포함될 경우에만 핸들러에 의해 출력된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="encoding" type="valuableToken" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 핸들러가 메시지를 남길 때 사용할 Encoding을 설정한다.
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="filter-class" type="valuableToken" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 핸들러에 지정할 필터 클래스의 Fully Qualified Class Name을 설정한다.
                        필터 클래스에 구현한 내용을 바탕으로 로그 메시지들이 필터링되어서 출력된다.
                        [Example]: com.tmax.logging.filter.MyFilter
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="file-handlerType">
        <xs:complexContent>
            <xs:extension base="common-handlerType">
                <xs:sequence>
                    <xs:element name="file-name" type="xs:token" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                [Description]: 핸들러가 사용할 파일 이름을 설정한다. 만약, User가 이 설정을 하지 않으면
                                각 Logger의 Default File Name이 사용된다. 각각의 Default File Name은 "JEUS Server 안내서"를
                                참고한다.
                                [Example]: /home/jeus/logs/mylog.log
                            ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>

                    <xs:element name="enable-rotation" type="xs:boolean" minOccurs="0" default="true">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                [Description]: 핸들러가 사용하는 파일이 Log File Rotation 기능을 사용할지 여부를 설정한다.
                                별도로 설정하지 않으면 true로 설정되고, 파일에 Logging할 때 Rotation 기능을 사용한다.
                                [Value Description]: Boolean 타입으로, 기본값은 true이다.
                                [Example]: true
                            ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>

                    <xs:element name="rotation-count" type="off-intType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                [Description]: 핸들러가 사용하는 파일이 Log File Rotation 기능을 사용할 때 백업할 파일의 개수를 설정한다.
                                만약, 설정하지 않고 File Size로 Rotation할 경우에는 99999개 까지 쌓이고,
                                날짜나 시간으로 Rotation할 경우에는 Rotation된 파일은 계속 쌓인다.
                                [Example]: 10
                            ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>

                    <xs:element name="rotation-dir" type="xs:string" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                [Description]: 핸들러가 사용하는 파일이 Log File Rotation 기능을 사용할 때 Rotation된 파일이 저장될 위치를 설정한다.
                                설정하지 않으면 현재 Logging을 하고 있는 파일의 디렉터리에 저장된다.
                                [Example]: /home/jeus/backup_logs
                                [Advanced]: 고급선택사항
                            ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>

                    <xs:choice minOccurs="0" maxOccurs="1">
                        <xs:element name="valid-day" type="off-intType" default ="1">
                            <xs:annotation>
                                <xs:documentation><![CDATA[
                                    [Description]: 핸들러가 사용하는 파일을 설정한 기간 동안만 사용하고 계속 갱신할 경우에 사용한다.
                                    이 설정은 날짜 단위로 파일을 바꿀 때 사용한다. 이 경우 핸들러가 사용하는 파일 이름
                                    뒤에 파일이 사용된 날짜가 자동으로 붙게 된다.
                                    [Value Description]: 날짜를 나타내는 값으로 정수이다. Valid Day, Valid Hour, Valid Size를 설정하지 않은 경우
                                    Valid Day를 1로 설정한 것과 동일하게 동작한다.
                                    [Example]: 1
                                ]]></xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="valid-hour" type="off-intType">
                            <xs:annotation>
                                <xs:documentation><![CDATA[
                                    [Description]: 핸들러가 사용하는 파일을 Valid Hour에 지정된 기간 동안만 사용하고 계속 갱신할
                                    경우에 사용한다. 이 설정은 시간 단위로 파일을 바꿀 때 사용한다. 이 경우 핸들러가 사용하는 파일 이름
                                    뒤에 파일이 사용된 날짜와 시간이 자동으로 붙게 된다.
                                    [Value Description]: 시간을 나타내는 값으로 정수이다.
                                    [Example]: 3
                                ]]></xs:documentation>
                            </xs:annotation>
                        </xs:element>
                        <xs:element name="valid-size" type="off-intType">
                            <xs:annotation>
                                <xs:documentation><![CDATA[
                                    [Description]: 핸들러가 사용하는 파일이 Valid Size에 지정한 크기보다 작을 때까지만 사용하고
                                    계속 갱신할 경우에 사용한다. 이 설정은 사이즈 단위로 파일을 바꿀 때 사용한다.
                                    이 경우 핸들러가 사용하는 파일 이름 뒤에 순차적으로 Index가 붙게 된다.
                                    [Value Description]: 사이즈를 나타내며 단위는 kb이다.
                                    [Example]: 1024
                                ]]></xs:documentation>
                            </xs:annotation>
                        </xs:element>
                    </xs:choice>
                    <xs:element name="buffer-size" type="nonNegativeIntType" minOccurs="0" default="1024">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                [Description]: 핸들러가 파일에 출력할 때 사용하는 Buffer의 크기를 지정한다.
                                [Value Description]: Byte 단위이고 기본값은 1024이다.
                                [Performance Recommendation]: 이 값이 클수록 파일에 출력되는 메시지는 지연되어 출력되지만
                                Logging 성능은 좋아진다.
                                [Advanced]: 고급선택사항
                            ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="append" type="xs:boolean" minOccurs="0" default="true">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                [Description]: 핸들러가 사용하는 파일이 이미 존재하는 경우 파일 뒤에 덧붙여 사용할지를 결정한다.
                                false로 설정되어 있다면 Enable Rotation이 true로 설정된 경우에는 Boot Time에 Rotation을 하고
                                Enable Rotation이 false로 설정된 경우에는 기존의 파일에 덮어쓴다.
                                [Value Description]: Boolean 타입이고, 기본값은 true이다.
                                [Advanced]: 고급선택사항
                            ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="smtp-handlerType">
        <xs:complexContent>
            <xs:extension base="common-handlerType">
                <xs:sequence>
                    <xs:group ref="smtp-propertyGroup"/>
                    <xs:element name="send-for-all-messages" type="xs:boolean" minOccurs="0" default="false">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                [Description]: 핸들러로 들어왔을 때 이를 e-mail로 보낼 대상으로 여길지를 설정한다. false로 설정되어
                                있으면 Logger의 특별한 send() 메소드로 호출된 메시지들만 e-mail로 전송된다.
                                즉, 처음부터 e-mail로 보낼 의도로 지정된 메시지들만 e-mail로 전송된다.
                            ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="smtp-senderType">
        <xs:sequence>
            <xs:group ref="smtp-propertyGroup"/>
        </xs:sequence>
    </xs:complexType>

    <xs:group name="smtp-propertyGroup">
        <xs:sequence>
            <xs:element name="smtp-host-address" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: e-mail을 보낼 SMTP 서버의 주소를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="from-address" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: e-mail을 보내는 사람의 주소를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="sender-id" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: e-mail을 보낼 sender의 id를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="sender-password" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: e-mail을 보낼 sender의 password를 지정한다.
                        암호화해서 저장할 때에는 '{암호화할 알고리즘}암호화된 password'와 같은 형식으로 입력한다.
                        [Example]: {DES}FQrLbQ/D8O1lDVS71L28rw==
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="to-address" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: e-mail을 받는 사람의 주소를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="property" type="propertyType" maxOccurs="unbounded" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이용하는 mail서버에 특정한 smtp 프로퍼티를 지정한다.
                        schema에 명시된 property와 겹치는 경우에는 schema의 값을 따른다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="cc-address" type="valuableToken" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: e-mail을 참조로 받는 사람의 주소를 지정한다.
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="bcc-address" type="valuableToken" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: e-mail을 숨은 참조로 받는 사람의 주소를 지정한다.
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="socket-handlerType">
        <xs:complexContent>
            <xs:extension base="common-handlerType">
                <xs:sequence>
                    <xs:element name="address" type="valuableToken">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                            [Description]: 핸들러가 생성될 때 메시지들을 보낼 곳의 IP 주소를 설정한다.
                        ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="port" type="nonNegativeIntType">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                                [Description]: 핸들러가 생성될 때 메시지들을 보낼 곳의 포트 번호를 설정한다.
                            ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:simpleType name="valuableToken">
        <xs:restriction base="xs:token">
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="off-intType">
        <xs:annotation>
            <xs:documentation><![CDATA[
               [Value Type Description]: 기본적으로 Non Negative Int 타입이지만 -1인 경우에는 미설정 상태이다. 즉, off된다.
            ]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:int">
            <xs:minInclusive value="-1"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeIntType">
        <xs:annotation>
            <xs:documentation><![CDATA[
               [Value Type Description]: 0 이상의 Int 값이다.
            ]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:int">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeLongType">
        <xs:annotation>
            <xs:documentation><![CDATA[
               [Value Type Description]: 0 이상의 Long 값이다.
            ]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:long">
            <xs:minInclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="positiveLongType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Value Type Description]: 1 이상의 Long 값이다.
            ]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:long">
            <xs:minExclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="positiveIntType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Value Type Description]: 1 이상의 Integer 값이다.
            ]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:int">
            <xs:minExclusive value="0"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="priortyType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Value Type Description]: JMS Message의 Priority로 사용된다. 0~9
            ]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:int">
            <xs:minInclusive value="0"/>
            <xs:maxInclusive value="9"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="off-longType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Value Type Description]: 기본적으로 Unsigned Long 타입이지만 -1인 경우에는 미설정 상태이다. 즉, off된다.
            ]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:long">
            <xs:minInclusive value="-1"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="fractionType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Value Type Description]: 0과 1사이의 Float 타입으로 비율을 나타낸다.
            ]]></xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:float">
            <xs:minInclusive value="0"/>
            <xs:maxInclusive value="1"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="user-handlerType">
        <xs:complexContent>
            <xs:extension base="common-handlerType">
                <xs:sequence>
                    <xs:element name="handler-class" type="valuableToken">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                        [Description]: User가 생성한 핸들러의 Fully Qualified Class Name을 설정한다.이 클래스는
                        java.util.logging.Handler를 상속받고 jeus.util.logging.JeusHandler를 구현해야 한다.
                        [Example]: com.tmax.logging.handler.MyHandler
                    ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="handler-property" type="handlerPropertySetType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                        [Description]: 핸들러가 생성될 때 넘겨줄 프로퍼티를 설정한다. 이 프로퍼티들은
                        Key Value로 Map 객체에 저장되어 JeusHandler.setProperty() 메소드를 통해 핸들러로
                        전달된다.
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="formatter-class" type="xs:token" minOccurs="0" default="jeus.util.logging.SimpleFormatter">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                        [Description]: 핸들러가 사용할 Formatter의 Fully Qualified Class Name을 설정한다.이 클래스는
                        java.util.logging.Formatter를 상속받고 jeus.util.logging.JeusFormatter를 구현해야 한다.
                        [Example]: com.tmax.logging.handler.MyHandler
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                    <xs:element name="formatter-property" type="handlerPropertySetType" minOccurs="0">
                        <xs:annotation>
                            <xs:documentation><![CDATA[
                        [Description]: 핸들러가 생성될 때 함께 생성된 Formatter에게 넘겨줄 프로퍼티를 설정한다.
                        이 프로퍼티들은 Key Value로 Map 객체에 저장되어 JeusFormatter.setProperty() 메소드를 통해
                        Formatter로 전달된다.
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                        </xs:annotation>
                    </xs:element>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="handlerPropertySetType">
        <xs:sequence>
            <xs:element name="property" type="propertyType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 핸들러 등에게 전달할 프로퍼티들을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="propertyType">
        <xs:sequence>
            <xs:element name="key" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: 프로퍼티의 Key 값이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="value" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 프로퍼티의 Value 값이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="propertiesType">
        <xs:sequence>
            <xs:element name="property" type="propertyType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="loggingLevelType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="OFF">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="SEVERE">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="WARNING">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="INFO">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="CONFIG">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="FINE">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="FINER">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="FINEST">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>

            <xs:enumeration value="ALL">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Java SE Logging API의 "Level Class Documentation"을 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="securityPermissionType">
        <xs:sequence>
            <xs:element name="description" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                  [Description]: Security Permission 설정에 대한 설명을 입력할 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="security-permission-spec" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                  [Description]: Security Permission을 기술한다. 형식은 Java Policy 파일을 따른다.
                  [Example]: grant {
                                permission java.lang.RuntimePermission "foo";
                            }
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="rolePermissionType">
        <xs:sequence>
            <xs:element name="principal" type="xs:token" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Role에 해당하는 User Principal을 지정한다.
                        [Value Description]: Security의 accounts.xml에서 지정되어 있는 Principal 이름을 입력한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="role" type="xs:token" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: Principal들에게 부여할 Role 이름을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="actions" type="xs:token" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Role Permission 객체에 대한 액션을 정의한다. 기본으로 사용되는
                        Role Permission은 정해진 액션이 없다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="classname" type="xs:token" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 사용할 Role Permission Class Name을 지정한다. 지정하지 않으면 JEUS에서
                    기본적으로 제공하는 클래스가 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="excluded" type="emptyType" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Role을 사용하지 못하도록 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="unchecked" type="emptyType" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 아무런 체크 없이 Role을 사용 가능하도록 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="emptyType">
        <xs:annotation>
            <xs:documentation><![CDATA[
                [Value Type Description]: 하위 설정 항목이 없는 타입으로 Self Closing 형태로 설정된다(ex. <unchecked/>).
            ]]></xs:documentation>
        </xs:annotation>
    </xs:complexType>

    <!-- EJB CMP only:do not touch -->
    <xs:simpleType name="db-vendorType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="oracle">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Oracle DBMS인 경우 선택한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="informix">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Informix DBMS인 경우 선택한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="db2">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: IBM DB2 DBMS인 경우 선택한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="mssql">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Microsoft SQL Server DBMS인 경우 선택한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="sybase">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Sybase DBMS인 경우 선택한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="hsql">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: HSQL DBMS인 경우 선택한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="cloudscape">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Cloudscape DBMS인 경우 선택한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="mysql">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: MySQL DBMS인 경우 선택한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="tibero">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Tibero DBMS인 경우
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="engineType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="EXCLUSIVE_ACCESS">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 각각의 Entity Bean 인스턴스는 그것이 나타내는 DB의 열과 1:1 관계를 가지고 그에
                    대해서 독점적인 접근을 한다. 이것은 하나의 인스턴스가 살아있는 동안 다른 Entity Bean은
                    데이터에 접근하거나 변경할 수 없다는 사실을 의미하기 때문에 EJB 엔진은 ejbLoad() 호출을
                    모두 생략할 수 있다는 것을 나타낸다. 엔진은 Bean이 생성될 때 한 번 ejbLoad() 호출을 실행하고
                    Bean이 살아있는 동안 DB에 더 이상의 어떤 변화도 없다고 가정하고 ejbLoad() 호출을 하지
                    않는다. 이 Bean은 이것이 클러스터링된 Bean의 일부일 때 사용할 수 없다. DB는 WAS에
                    의해서만 변경이 허락된다는 점을 반드시 유념한다(WAS가 아닌 접근은 허용되지 않는다).
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="SINGLE_OBJECT">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 다른 EJB 엔진의 여러 EJB들이 같은 DB 열에 매핑될 수 있는 설정이다.
                                   ejbLoad()는 Entity Bean으로 요청이 들어오기 전에 항상 호출된다.  SINGLE_OBJECT와
                    MULTIPLE_OBJECT는 같은 종류의 EJB를 클러스터링할 때 필요하다. SINGLE_OBJECT와
                                    MULTIPLE_OBJECT의 차이점은 SINGLE_OBJECT인 경우 각각의 EJB 엔진 내에서 오직 하나의 EJB
                    Entity Bean이 EJB 클라이언트의 모든 요청을 처리한다. 즉 같은 EJB 엔진으로 다른 EJB
                    클라이언트의 요청이 도착한다면 먼저 연결을 맺고 있는 다른 클라이언트의 요청이 끝날 때까지
                    대기상태에 있어야 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="MULTIPLE_OBJECT">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 다른 EJB 엔진의 여러 EJB들이 같은 DB 열에 매핑될 수 있는 설정이다.
                                    ejbLoad()는 Entity Bean으로 요청이 들어오기 전에 항상 호출된다.  SINGLE_OBJECT와
                    MULTIPLE_OBJECT는 같은 종류의 EJB를 클러스터링할 때 필요하다. SINGLE_OBJECT와
                                      MULTIPLE_OBJECT의 차이점은 MULTIPLE_OBJECT인 경우 각각의 EJB 엔진 내에서 모든 EJB
                     클라이언트의 요청을 동시에 처리할 여러 EJB Entity Bean 인스턴스가 생성된다.즉 SINGLE_OBJECT 모드와
                    달리 EJB 클라이언트의 요청은 먼저 처리하고 있는 다른 요청이 끝날 때까지 대기하지 않아도 된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <!-- CAUTION : this type is shared by JNDI server, local, session server,
                  JDBC connection pool, so be careful to modify default value
                  or the name of element -->
    <xs:complexType name="poolingType">
        <xs:sequence>
            <xs:element name="min" type="nonNegativeIntType" minOccurs="0" default="2">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pooling되는 객체의 최솟값을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max" type="nonNegativeIntType" minOccurs="0" default="30">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pooling되는 객체의 최댓값을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="period" type="xs:long" minOccurs="0" default="3600000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pool에 있는 객체의 개수를 min 값에 지정된 개수만큼 줄인다.
                        [Performance Recommendation]: 설정값이 클수록 정리하는 주기가 길어져 서버를 운영할 때 부하가
                        줄어들 수 있지만 그만큼 메모리 사용량이 늘어날 수 있다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="oldPoolingType">
        <xs:sequence>
            <xs:element name="min" type="nonNegativeIntType" minOccurs="0" default="2">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pooling되는 객체의 최솟값을 지정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max" type="nonNegativeIntType" minOccurs="0" default="30">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pooling되는 객체의 최댓값을 지정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="step" type="nonNegativeIntType" minOccurs="0" default="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Pool에 커넥션이 부족할 경우 현재 생성된 커넥션이 최댓값 이하일 때 새로 생성한다.
                        이때 새로 생성할 커넥션의 개수를 지정한다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="period" type="xs:long" minOccurs="0" default="3600000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 설정한 주기가 되면, Connection Pool의 크기를 최솟값에 맞춰 조정한다.
                        Connection Pool의 크기가  최솟값을 초과하는 경우에는 사용하지 않는 커넥션들을 닫고, Connection Pool의 크기가 최소값에 미치지 못하는 경우에는 커넥션을 새로 맺는다.
                        밀리세컨드 단위로 설정한다.
                        [Performance Recommendation]: 설정값을 작게 지정할 경우에는 물리적 커넥션에 대한 close가 자주 발생하게 된다.
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="methodParamType">
        <!-- Originally, we took methodName(Arg1,Arg2..) type, but now we use J2EE style -->
        <xs:sequence>
            <xs:element name="method-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                            [Description]: 메소드의 이름을 지정한다.
                            [Example]: foo
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element minOccurs="0" name="method-params" type="method-paramsType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                            [Description]: 메소드의 파라미터들을 순서대로 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="method-paramsType">
        <xs:sequence>
            <xs:element name="method-param" type="valuableToken" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                            [Description]: 메소드의 파라미터의 Fully Qualified Class Name을 지정한다.
                            [Example]: java.lang.String
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jndi-infoType">
        <xs:sequence>
            <xs:element name="ref-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: 소스코드에서 사용할 수 있는 참조 이름을 선언할 수 있다.
                        [Value Description]: 실제 JNDI 이름에 바인드될 참조 이름이다. 이것은 해당하는 J2EE 표준 Descriptor 항목의 Ref Name에 대응된다.
                        [Example]: ejb/AccountEJB
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="export-name" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JEUS DD에 정의된 실제 JNDI 이름을 설정한다.
                        [Example]: ACCEJB
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:group name="jndiEnvironmentMappingGroup">
        <xs:annotation>
            <xs:documentation>
                This group keeps the usage of the contained JNDI environment
                reference mapping elements consistent across JEUS deployment descriptors.
            </xs:documentation>
        </xs:annotation>

        <xs:sequence>
            <xs:element name="env" type="envType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 표준 DD에 정의된 Env Entry 값을 Override하기 위해 사용된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="ejb-ref" type="jndi-refType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 코드에서 사용하는 EJB 참조를 실제 EJB JNDI 이름으로 바인드한다.
                    [Dependency]: ejb-ref/jndi-info/ref-name = ejb-ref/ejb-ref-name
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="res-ref" type="jndi-refType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 소스코드에서 사용할 수 있는 외부 자원(예: DB) 참조 이름을 선언할 수 있다.
                    [Dependency]: res-ref/jndi-info/ref-name = ejb-jar/enterprise-beans/ * /resource-ref/res-ref-name
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="res-env-ref" type="jndi-refType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 코드에서 사용하는 외부 자원 참조를 실제 JNDI 이름으로 바인드한다.
                    표준 EJB DD의 <resource-env-ref>에 대응한다.
                    [Dependency]: res-env-ref/jndi-info/ref-name = ejb-jar/enterprise-beans/ * /resource-env-ref/resource-env-ref-name
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="message-destination-ref" type="jndi-refType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: 코드에서 사용하는 외부 자원 참조를 실제 JNDI 이름으로 매핑한다.
                    표준 DD의 <message-destination-ref>에 대응된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="service-ref" type="jeus-webservices-client-ddType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: JEUS 웹 서비스 클라이언트 설정 문서의 최상위 항목이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

        </xs:sequence>
    </xs:group>

    <xs:complexType name="envType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 코드에서 사용하는 환경변수의 이름을 설정한다.
                        [Example]: minAmount
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="type" type="valuableToken" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 환경변수의 Java 타입을 설정한다.
                        [Value Description]: java.lang.Boolean, java.lang.String, java.lang.Integer, 
                        java.lang.Double, java.lang.Byte, java.lang.Short, java.lang.Long, 
                        java.lang.Float, java.lang.Character의 자바 타입 중 하나를 선택해야 한다.
                        [Example]: java.lang.Integer
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="value" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 대응하는 Wrapper 클래스 생성자의 파라미터로서 사용되는 값을 설정한다.
                        [Example]: 100
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jndi-refType">
        <xs:sequence>
            <xs:element name="jndi-info" type="jndi-infoType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Environment Entry에 사용되는 Logical 이름을 실제 JNDI 이름으로 매핑한다.
                        예를 들면 "jdbc/myDataSource"로 사용된 Environment Entry 이름을 실제 JNDI 이름인
                        "DataSource1"으로 매핑한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="invoke-httpType">
        <xs:sequence>
            <xs:element name="url" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: HTTP-RMI Stub에 의해 호출될 RMI 핸들러 서블릿(jeus.rmi.http.ServletHandler)
                        의 URI 경로가 반드시 설정되어야 한다. 이 URL은 프로토콜, 웹 서버 IP, 포트 번호를 제외하고 오직
                        서블릿 요청 경로만을 설정해야 한다.  프로토콜은 HTTP, RMI 실행 환경과 웹 서버는 같은 IP 주소를
                        가지고 있다고 가정한다(이것은 웹 서버와 웹 엔진은 반드시 HTTP-RMI 요청을 같은 머신에서
                        받는다는 것을 의미한다). 포트 번호는 다음에 설명할 HTTP Port에서 설정한다.
                        [Value Description]: RMI 핸들러 서블릿을 명시한 서블릿 컨텍스트 경로를 설정한다.
                        [Example]: /mycontext/RMIHandlerServlet
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="http-port" type="nonNegativeIntType" minOccurs="0" default="80">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: HTTP-RMI 요청을 받고 처리할 웹 서버의 포트 번호를 설정한다. 해당 웹 서버 및 웹
                        엔진에서는 반드시 RMI 핸들러 서블릿이 Deploy되어 있고 이미 실행 중이어야만 한다.
                        [Value Description]: HTTP-RMI Stub가 연결할 웹 서버의 포트 번호를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="res-refType">
        <xs:sequence>
            <xs:element name="jndi-info" type="jndi-infoType" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서버의 JNDI에 등록할 각 Resource Reference의 Export Name과 Reference Name을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="system-loggingType">
        <xs:sequence>
            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: Logger에 대해 설정을 적용할 때 해당 Logger Name을 지정한다. Logger의 이름을 알고 싶을 때는 Logger 페이지를 별도로 참고한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:group ref="loggingGroup"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="user-logType">
        <xs:complexContent>
            <xs:extension base="system-loggingType"/>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="jsp-engineType">
        <xs:sequence>
            <xs:element name="jsp-work-dir" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JSP를 Java로 생성한 파일과 그 소스 파일을 컴파일한 클래스 파일들이 저장되는 위치를 설정한다.
                        [Value Description]: JSP 컴파일을 위해서 사용되는 절대 경로를 입력한다.
                        [Defined Value]: [default] (%GENERATED_APP_HOME%/__jspwork/jeus_jspwork)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="java-compiler" type="xs:token" minOccurs="0" default="java6">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JSP의 Java 소스를 서블릿 클래스로 컴파일하기 위한 Java 컴파일러를 지정한다.
                                       기본적으로는 JVM에 포함된 Java Compiler API를 사용한다.
                                       단, Java 컴파일 작업은 순간적으로 메모리 소모량이 많기 때문에 실 서비스 환경에서는 메모리 문제를 일으킬 수 있다.
                                       이 경우에는 javac를 선택해서 별도의 프로세스로 컴파일하거나 AppCompiler를 통해 미리 컴파일해서 사용하기를 권장한다.
                        [Defined Value]: [default] (java6)
                                         [java6] (Java 6부터 제공하는 Java Compiler API를 사용한다.)
                                         [sun.tools.javac] (JDK 1.4에서 deprecated되었다. 패키지가 명시되지 않는 클래스를 JSP에서 참조하는 경우에 사용한다.)
                                         [javac] (시스템 패스에 포함된 외부 "javac" 컴파일러를 지정한다.)
                                         [com.sun.tools.javac] (JDK 1.4 Default 컴파일러로, sun.tools.javac보다 효율적이고 안정적이므로 우선시하는 옵션이다.)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="compile-output-dir" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JSP 파일에 의해 생성된 클래스 파일들을 Jsp Work Dir 디렉터리가 아닌 다른 디렉터리에 저장할 수 있는 설정이다.
                                       설정하지 않으면 클래스 파일들은 Jsp Work Dir 디렉터리에 위치한다. 본 설정은 보통 사용되지 않는다.
                        [Value Description]: JSP 클래스 파일들을 저장할 디렉터리의 절대 경로를 입력한다.
                        [Defined Value]: [default] (%GENERATED_APP_HOME%/__jspwork/jeus_jspwork)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="compile-option" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서블릿 컴파일러로 사용되는 옵션으로, 일반적으로는 사용되지 않는다.
                        [Value Description]: 컴파일에 사용되는 적절한 컴파일 옵션이다(Java Compiler 설정 항목을 참조).
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="compile-encoding" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JSP 파일로부터 생성하는 Java 파일의 인코딩은 JSP 파일의 그것과 동일하게 하면 된다.
                        jeus.servlet.jsp.modern=false 일 때 외에는 더이상 참조하지 않는다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="check-included-jspfile" type="xs:boolean" minOccurs="0" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JSP 파일의 변경 여부를 확인할 때, include된 JSP 파일들, Tag 파일들의 변경 여부를 확인해서
                                       변경된 경우 해당 JSP 파일을 재컴파일하는 기능이다.
                        [Value Description]: Boolean 타입으로, 기본값은 false이다.
                        [Defined Value]: [true] (설정을 활성화한다.)
                                         [false] (설정을 비활성화한다.)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keep-generated" type="xs:boolean" minOccurs="0" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JSP 페이지로부터 생성된 Java 소스 파일을 컴파일하여 서블릿 클래스 파일을 생성한 이후에 Java 소스 파일의 저장 여부를 결정한다.
                                       디버깅 목적으로 이 파일들은 유용하다.
                        [Value Description]: Boolean 타입으로, 기본값은 true이다.
                        [Defined Value]: [true] (Java 소스 파일을 유지한다.)
                                         [false] (Java 소스 파일을 삭제한다.)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="graceful-jsp-reloading" type="xs:boolean" minOccurs="0" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]:  이 기능은 사용을 권장하지 않는다.
                        [Value Description]: Boolean 타입으로, 기본값은 false이다.
                        [Defined Value]: [default] : false
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="graceful-jsp-reloading-period" type="xs:long" minOccurs="0" default="30000">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 이 기능은 사용을 권장하지 않는다.
                        [Value Description]: 밀리세컨드
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="use-in-memory-compilation" type="xs:boolean" minOccurs="0" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서비스 중인 jsp 파일을 새로 컴파일해야 할 때 .java 및 .class 파일을 메모리 상에 생성해서 컴파일하는 기능이다.
                        단, .class 파일의 경우에는 추후 리부팅할 때에 재컴파일하는 일이 없도록 백그라운드 스레드를 통해서 파일 시스템 상에 쓴다.
                        또한 <keep-generated>가 true인 경우에는 .java 파일을 백그라운드 스레드를 통해서 파일 시스템 상에 쓴다.
                        [Value Description]: boolean
                        [Defined Value]: [default] : true : 해당 기능을 항상 사용한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="schedulerType">
        <xs:sequence>
            <xs:element name="enabled" type="xs:boolean" minOccurs="0" default="true">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Scheduler 서비스의 구동 여부를 지정한다.
                        [Defined Value]: [default] (true)
                                         [true] (활성화한다.)
                                         [false] (비활성화한다.)
                        [Basic]: 고급선택사항 아님
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="pooling" type="thread-poolingType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: Scheduler에서 멀티 스레드로 Job을 실행할 때 사용하는 Thread Pool을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="job-list" type="job-listType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Scheduler에 등록할 Job List을 지정한다.
                        [Basic]: Scheduler에 Job을 추가하는 것은 고급선택사항이 아니다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="job-listType">
        <xs:sequence>
            <xs:element name="job" type="jobType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Scheduler에 등록할 하나의 Job을 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="jobType">
        <xs:sequence>
            <xs:element name="class-name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Job을 수행하는 클래스의 Fully Qualified Name을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="name" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: Job의 이름을 지정한다(ID에 대한 Validation작업이 필요).
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="description" type="valuableToken" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Job의 설명을 입력할 수 있다.
                        [Advanced]: 고급선택사항
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="begin-time" type="xs:dateTime" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Job의 시작시간을 지정한다. 설정되지 않으면 Job은 바로 시작된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="end-time" type="xs:dateTime" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Job의 종료시간을 지정한다. 설정되지 않으면 Job은 종료되지 않는다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="interval" type="intervalType" minOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Job이 수행되는 주기를 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="count" type="xs:long" minOccurs="0" default="-1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Job의 수행 횟수를 지정한다.
                        [Defined Value]: [-1] (수행 횟수를 제한하지 않는다)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="intervalType">
        <xs:choice>
            <xs:element name="millisecond" type="xs:long">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 주기를 밀리세컨드 단위로 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="minutely" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 주기를 분 단위로 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="hourly" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 주기를 시간 단위로 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="daily" type="nonNegativeIntType">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 주기를 날짜 단위로 지정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="vendorType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="oracle">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Oracle JDBC 드라이버
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="sybase">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Sybase JDBC 드라이버
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="mssql">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: JEUS MS SQL JDBC 드라이버
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="db2">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: DB2 JDBC 드라이버
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="tibero">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Tibero JDBC 드라이버
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="informix">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Informix JDBC 드라이버
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="mysql">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: MySQL JDBC 드라이버(Connector/J)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="others">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Other JDBC 드라이버
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="run-as-identityType">
        <xs:sequence>
            <xs:element name="principal-name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                    [Description]: ejb-jar.xml 또는 web.xml 내에서 <run-as-specified-identity>의 Role로 사용되는 Principal 이름을 설정한다.
                    [Value Description]: Security의 subjects.xml에서 지정되어 있는 Principal 이름을 입력한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="SecurityServiceType">
        <xs:sequence>
            <xs:element name="classname" type="xs:token" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: jeus.security.spi의 클래스들 중 하나를 확장한 Java 클래스 이름을 설정한다.
                        [Value Description]: Java 클래스 이름
                        [Example]: mypackage.MyAutenticationService
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="property" type="SecurityServicePropertyType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 선택사항으로 해당 보안 서비스에 Name Value 쌍으로 속성을 정의한다. 정의할 수 있는 속성과 각 속성에 대한 설명은 서비스 클래스에 대한 문서를 참조한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="SecurityServicePropertyType">
        <xs:sequence>
            <xs:element name="name" type="xs:token" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: 속성 이름을 설정한다.
                        [Value Description]: 속성 이름
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="value" type="xs:token" minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 속성에 대한 값을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="keystore-configType">
        <xs:sequence>
            <xs:element name="keystore-path" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 현재 도메인에 적용할 Keystore 파일 경로를 정의한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keystore-alias" type="xs:token" minOccurs="0" default="changeit">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Keystore 파일의 KeyEntry 타입의 인증서가 여러 개인 경우 명시적으로 Alias 값으로
                                       해당 서버 인증에 필요한 인증서를 가리키도록 한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keystore-password" type="xs:token" minOccurs="0" default="changeit">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 현재 도메인에 적용할 Keystore 파일에 대한 Password를 정의한다.
                                       Password를 암호화해서 저장할 때에는 {algorithm}ciphertext와 같은 형식으로 입력한다.
                        [Example]: {DES}FQrLbQ/D8O1lDVS71L28rw==
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keystore-keypassword" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 현재 도메인에 적용할 Keystore 파일에 대한 Keypassword를 정의한다.
                                       Password를 암호화해서 저장할 때에는 {algorithm}ciphertext와 같은 형식으로 입력한다.
                        [Example]: {DES}FQrLbQ/D8O1lDVS71L28rw==
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="truststore-path" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 현재 도메인에 적용할 Truststore 파일 경로를 정의한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="truststore-password" type="xs:token" minOccurs="0" default="changeit">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 현재 도메인에 적용할 Truststore 파일에 대한 Password를 정의한다.
                                       Password를 암호화해서 저장할 때에는 {algorithm}ciphertext와 같은 형식으로 입력한다.
                         [Example]: {DES}FQrLbQ/D8O1lDVS71L28rw==
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="encodingSubType">
        <xs:choice>
            <xs:element name="default" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 지정된 Encoding이 없을 경우 기본적으로 적용하는 값이다.
                        [Value Description]: 표준 캐릭터 Encoding 값(e.g. UTF-8)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="forced" type="valuableToken">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 지정된 Encoding이 있지만, 강제적으로 적용하는 값이다.
                        이 값은 애플리케이션의 모든 동작보다 우선 순위가 높다.
                        [Value Description]: 표준 캐릭터 Encoding 값(e.g. UTF-8)
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="requestEncodingType">
        <xs:sequence>
            <xs:choice>
                <xs:element name="default" type="valuableToken">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: 지정된 Encoding이 없을 경우 기본적으로 적용하는 값이다.
                            [Value Description]: 표준 캐릭터 Encoding 값(e.g. UTF-8)
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="client-override" type="valuableToken">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: 지정된 Encoding이 없고, HTTP 클라이언트에서 보내는 Content-Type 헤더의 charset 속성을 치환하는 값이다.
                            JEUS 6 이전 및 JEUS 7 Fix#1까지의 <forced> 설정을 대신한다.
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="forced" type="valuableToken">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: 지정된 Encoding이 있지만, 강제적으로 적용하는 값이다.
                            이 값은 애플리케이션의 모든 동작보다 우선 순위가 높다.
                            [Value Description]: 표준 캐릭터 Encoding 값(e.g. UTF-8)
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="webContainerEncodingType">
        <xs:sequence>
            <xs:element name="request-encoding" type="requestEncodingType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: HTTP 요청을 읽을 때 적용할 Encoding을 지정한다.
                                       Socket에서 읽은 byte array(query strings, application/x-www-form-urlencoded 형식의 body 등)를 파싱해서 String 객체로 만들 때 적용한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="response-encoding" type="encodingSubType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: HTTP Response header에 "Content-type: text/html; charset=XXX"의 "XXX" 부분을 설정할 때 사용한다.
                                       JSP Page Encoding에도 적용한다.
                                       컨테이너 내부적으로는 Servlet이 만든 String 객체를 버퍼에 저장하기 위해 byte array로 변환할 때 사용한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:group name="library-ref-group">
        <xs:sequence>
            <xs:element name="library-ref" type="library-refType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 애플리케이션에서 사용할 Shared Library 정보를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>

    <xs:complexType name="library-refType">
        <xs:sequence>

            <xs:element name="library-name" type="xs:token" minOccurs="1">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: Shared Library 이름을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="specification-version" type="library-ref-versionType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 사용할 Shared Library 스펙(specification) 버전을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="implementation-version" type="library-ref-versionType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 사용할 Shared Library 구현(implementation) 버전을 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>

        </xs:sequence>

        <xs:attribute name="failonerror" type="xs:boolean" default="false">
            <xs:annotation>
                <xs:documentation><![CDATA[
                    [Description]: 해당 Shared Library를 찾지 못할 경우 Deploy를 실패할지 여부를 설정한다. 기본값은 false이다.
                ]]></xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="library-ref-versionType">
        <xs:simpleContent>
            <xs:extension base="xs:token">
                <xs:attribute name="exact-match" type="xs:boolean" default="false">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: 정확히 매치되는 버전이 필요한지 여부를 설정한다.
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:group name="ssl-config-group">
        <xs:sequence>
            <xs:element name="client-auth" type="xs:token" minOccurs="0" default="false">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클라이언트의 인증 여부를 설정한다.
                        [Value Description]: true, false 또는 want의 String 값을 설정할 수 있다. 기본값은 false이다.
                                             true이면 서버가 클라이언트에게 인증서를 요청하여 클라이언트에 대한 인증을 수행하고,
                                             false이면 클라이언트에 대한 인증과정을 수행하지 않는다.
                                             "want"일 경우 클라이언트가 자신의 인증서를 제공할 때만 인증을 수행한다.
                                             일반적으로 B2B를 제외한 보통의 경우에는 클라이언트 인증을 수행하지 않는다.
                     ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="ssl-protocol" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 암호화 및 복호화하는 데 사용되는 SSL 프로토콜을 지정한다.
                        [Value Description]: Sun JVM을 사용할 경우에는 TLS,
                                             IBM JVM을 사용할 경우에는 SSL을 설정해야 한다.
                                             기본값은 Sun JVM에서는 "TLS", IBM JVM에서는 "SSL"이다.
                     ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="cipher-suite" type="xs:token" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: SSL Handshaking 후에 실제 데이터를 보낼 때 사용하는 암호 Suite들을 지정한다.
                        [Value Description]: 일반적으로 JDK에서 제공하는 Cipher Suite를 사용하며,
                                             기본으로 제공되지 않는 Cipher suite를 사용할 때 사용한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keystore-file" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서버 비밀키와 그에 매칭되는 인증서를 저장한 파일을 지정한다.
                        웹 서버들과는 달리 PEM 형식의 비밀키 파일은 지원하지 않는다. Java KeyStore 형식의 파일을 사용하길 권장한다.
                        [Value Description]: 절대 경로와 상대 경로 모두 허용된다.
                                             만일 상대 경로가 사용된다면 JEUS_HOME/domains/domain_name/config 아래에서 해당 파일을 찾는다.
                                             그리고 JVM 인자로 jeus.ssl.keystore과 javax.net.ssl.keyStore을
                                             이용해서 설정할 수 있다.
                                             우선순위는 태그 설정값 > JEUS > javax 이다.
                                             기본값은 "JEUS_HOME/domains/domain_name/config/keystore"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keystore-pass" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: keystore-file을 열기 위한 암호값이다.
                                       이 값을 암호화해서 저장할 때에는 {algorithm}ciphertext와 같은 형식으로 입력한다. ex) {DES}FQrLbQ/D8O1lDVS71L28rw==
                        [Value Description]: 이 설정은 JVM 인자로 jeus.ssl.keypass과 javax.net.ssl.keyStorePassword를
                                             이용해서 설정할 수 있다.
                                             우선순위는 태그 설정값 > JEUS > javax 이다.
                                             기본값은 "changeit"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keystore-keypassword" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: keystore-file에 저장된 서버 비밀키대한 암호값이다.
                                       이 값을 암호화해서 저장할 때에는 {algorithm}ciphertext와 같은 형식으로 입력한다. ex) {DES}FQrLbQ/D8O1lDVS71L28rw==
                        [Value Description]: 이 설정은 Keystore의 Keypassword를 설정한다.
                        `                    값을 설정하지 않으면 기본으로 jeus.ssl.keypass과
                                             javax.net.ssl.keyStorePassword를 이용해서 설정할 수 있다.
                                             우선순위는 태그 설정값 > JEUS > javax 이다.
                                             기본값은 "jeuskeypass"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="keystore-type" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: keystore-file 의 타입을 지정한다.
                        [Value Description]: Sun의 Keytool에 의해서 Keystore를 생성한다면 "JKS"(Java's Keystore)를,
                                             OpenSSL이나 Microsoft KeyManager로 Keystore를 생성한다면 "PKCS12"를 사용해야 한다.
                                             이 설정은 JVM 인자로 javax.net.ssl.keyStoreType을 이용해서 설정할 수 있다.
                                             우선순위는 태그 설정값 > javax 이다.
                                             기본값은 "JKS"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="key-management-algorithm" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Keystore에 저장할 Key에 대한 관리 알고리즘을 설정한다.
                        [Value Description]: Sun JVM을 사용할 경우 "SunX509"를,
                                             IBM JVM을 사용할 경우에는 "IbmX509"를 사용해야 한다.
                                             이 설정은 JVM 인자로 ssl.KeyManagerFactory.algorithm을
                                             이용해서 설정할 수 있다.
                                             우선순위는 태그 설정값 > javax 이다.
                                             기본값은 Sun JVM에서는 "SunX509", IBM JVM에서는 "IbmX509"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="key-alias" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: SSL을 사용할 때 이용되는 서버 인증서의 Key Alias 이름을 설정한다. 
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="truststore-file" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서버 인증서를 저장하고 있는 파일을 지정한다. SSL 서버 인증 기능, 클라이언트 인증 기능 등에 필요한 인증서들을 저장한다.
                        웹 서버들과는 달리 PEM 형식의 인증서 파일은 지원하지 않는다. Java KeyStore 형식의 파일을 사용하길 권장한다.
                        [Value Description]: 절대 경로 및 상대 경로 모두 허용된다.
                                             만일 상대 경로가 사용된다면 JEUS_HOME/domains/domain_name/config 아래에서 해당 파일을 찾는다.
                                             그리고 JVM 인자로 jeus.ssl.truststore과 javax.net.ssl.trustStore을
                                             이용해서 설정할 수 있다.
                                             우선순위는 태그 설정값 > JEUS > javax 이다.
                                             기본값은 "JEUS_HOME/domains/domain_name/config/truststore"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="truststore-pass" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: truststore-file 파일을 열기 위한 암호값이다.
                                       이 값을 암호화해서 저장할 때에는 {algorithm}ciphertext와 같은 형식으로 입력한다. ex) {DES}FQrLbQ/D8O1lDVS71L28rw==
                        [Value Description]: 이 설정은 JVM인자로 jeus.ssl.trustpass과 javax.net.ssl.trustStorePassword를
                                             이용해서 설정할 수 있다.
                                             우선순위는 태그 설정값 > JEUS > javax 이다.
                                             기본값은 "changeit"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="truststore-type" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Truststore의 타입을 지정한다.
                        [Value Description]: Sun의 Keytool에 의해서 Keystore를 생성한다면 "JKS"(Java's Key Store)를,
                                             OpenSSL이나 Microsoft KeyManager로 Keystore를 생성한다면 "PKCS12"를 사용해야 한다.
                                             이 설정은 JVM 인자로 javax.net.ssl.trustStoreType을 이용해서 설정할 수 있다.
                                             우선순위는 webmain > javax 이다.
                                             기본값은 "JKS"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="trust-management-algorithm" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Truststore에 저장할 Trust에 대한 관리 알고리즘을 설정한다.
                        [Value Description]: Sun JVM을 사용할 경우 "SunX509"를,
                                             IBM JVM을 사용할 경우에는 "IbmX509"를 사용해야 한다.
                                             이 설정은 JVM인자로 ssl.TrustManagerFactory.algorithm을
                                             이용해서 설정할 수 있다.
                                             우선순위는 WebAdmin > javax 이다.
                                             기본값은 Sun JVM에서는 "SunX509", IBM JVM에서는 "IbmX509"이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="crl-file" type="xs:token" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Certificate Revocation Lists를 저장하고 있는 파일을 지정한다.
                        [Value Description]: 절대 경로, 상대 경로 모두 허용된다.
                                             만일 상대 경로가 사용된다면 JEUS_HOME/domains/domain_name/config 아래에서 해당 파일을 찾는다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>
    <xs:simpleType name="transaction-supportType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="NoTransaction"/>
            <xs:enumeration value="LocalTransaction"/>
            <xs:enumeration value="XATransaction"/>
            <xs:enumeration value="XATransactionOnly"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="action-on-resource-leakType">
        <xs:restriction base="xs:token">
            <xs:enumeration value="NoAction">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 아무 작업을 하지 않는다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="Warning">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 컴포넌트를 호출할 때 반환되지 않은 리소스에 대한 로그를 남긴다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="AutoClose">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 컴포넌트를 호출할 때 반환되지 않은 리소스에 대한 로그를 남기고 이를 닫아준다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="jeusModuleIdType">
        <xs:choice>
            <xs:sequence>
                <xs:element name="standalone-module-name" type="xs:token">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: Standalone으로 Deploy된 모듈의 이름을 설정한다.
                            [Basic]:
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
            <xs:sequence>
                <xs:element name="application-name" type="xs:token">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: 모듈이 속한 애플리케이션(EAR)의 이름을 설정한다.
                            [Basic]:
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="module-name" type="xs:token">
                    <xs:annotation>
                        <xs:documentation><![CDATA[
                            [Description]: EAR에 속한 모듈의 이름을 설정한다.
                            [Basic]:
                        ]]></xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:sequence>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="typePropertyType">
        <xs:sequence>
            <xs:element name="name" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [ID]: ID
                        [Description]: 프로퍼티의 이름이다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="type" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 프로퍼티 값의 Type을 설정한다.
                        [Value Description]: Java Primitive 타입이 올 수 있다. 또한 java.util.Properties 타입이 오면 Value의 값을 프로퍼티에 입력한다.
                        [Example]: java.lang.Integer
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="value" type="xs:token">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 프로퍼티의 값을 설정한다. java.util.Properties 타입이면, Value는 key=value[,key=value]* 형식이 된다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="data-sourcesType">
        <xs:sequence>
            <xs:element name="data-source" type="valuableToken" minOccurs="0" maxOccurs="unbounded" >
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 서버 혹은 클러스터에서 유효한 데이터소스의 ID를 명시한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="component-data-sourcesType">
        <xs:sequence>
            <xs:element name="data-source" type="valuableToken" minOccurs="1" maxOccurs="unbounded" >
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: 클러스터 데이터소스에 참여할 데이터소스의 ID를 입력한다. 목록의
                        첫 번째 데이터소스가 주 데이터소스로 동작한다.
                        [Example]: datasource1
                        [Dynamic]: 동적 변경이 가능하다.
                        [Basic]:
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ons-supportType">
        <xs:sequence>
            <xs:element name="ons-config" type="valuableToken" minOccurs="1" maxOccurs="1" >
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: ONS상의 각 RAC 노드들이 ONS 통신에 사용하는 IP, 포트를 설정한다.
                        클러스터 데이터소는 설정된 IP, 포트들에 소켓 연결을 맺어 ONS 클라이언트로 동작하게 된다.
                        [Example]: nodes=host1:6200,host2:6200
                        [Advanced]:
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="httpCookiePolicyType">
        <xs:sequence>
            <xs:element name="write-value-on-header-policy" type="write-value-on-header-policyType" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: Cookie Value를 HTTP header에서 읽고 쓸 때 URL Encoding Rule의 적용 여부를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="write-value-on-header-policyType">
        <xs:sequence>
            <xs:element name="apply-url-encoding-rule" type="xs:boolean" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: URL Encoding Rule 적용 여부를 설정한다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="charset-encoding" type="valuableToken" minOccurs="0">
                <xs:annotation>
                    <xs:documentation><![CDATA[
                        [Description]: URL Encoding Rule을 적용 여부에 상관없이 쿠키를 응답에 쓰거나 해석할 때 사용하는 Character Encoding이다.
                        설정하지 않을 경우 Request Encoding 및 Response Encoding을 따른다.
                    ]]></xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

</xs:schema>
